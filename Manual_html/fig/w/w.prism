mdp
//model as MDP to allow action/input and probabilistic distribution
//action/input required on each statement

module g1 
//single process g1, which may fail
x1 : [0..2];
f1 : bool;
[a1] x1=0 & f1=false ->  //failure specfication
	2/3:(x1'=1) & (f1'=false)
	+ 1/3:(x1'=1)&(f1'=true);
[a1]x1=0 & f1=true -> (x1'=1);//useless if no circle back to x1=0 after f1=true
[T]x1 = 1 & f1= false -> (x1'=2);
[T1]x1 = 1 & f1= true -> (x1'=2); //"T" differentialized after failure
[new1] x1=2 & f1= false ->(x1'=0);
endmodule

module g2 
//single process g2, identiacal to g1 but no failure
//The only shared variable is "T"
x2 : [0..2];
[a2] x2=0 -> (x2'=1);
[T]x2 = 1 & f1= false-> (x2'=2);
[T2]x2 = 1 & f1= true -> (x2'=2); //"T" differentialized after failure
[new2] x2=2->(x2'=0);
endmodule

module g1P
//property specified for g1
x1p : [0..3];
[a1] x1p=0 -> (x1p'=1);
[T1] x1p=1 -> (x1p'=2);
[T2] x1p=1 -> (x1p'=2);
[T1] x1p=2 -> (x1p'=3);
[T2] x1p=2 -> (x1p'=3);
endmodule

system
//Define how all processes above compose
(g1|[T]| g2)||g1P //or (g1|| g2)||g1P
endsystem

init
//Create an "init" label indicating initial state(s)
x1=0 & f1=false & x2=0 & x1p=0
endinit

//labels
//"final" states are required for generated HPA to be meaningful
label "final" = (x1=2 & x1p=3 & f1=true);

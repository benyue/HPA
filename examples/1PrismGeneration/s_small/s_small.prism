mdp

module g1 
x1 : [0..4];
f1 : bool;
[a1] x1=0 & f1=false -> //a1 failure specfication
	2/3:(x1'=1) & (f1'=false)
	+ 1/3:(x1'=1)&(f1'=true);
[a1]x1=0 & f1=true -> (x1'=1);
[T]x1 = 1 & f1= false -> (x1'=2);
[T1]x1 = 1 & f1= true -> (x1'=2);
[b1] x1=2 & f1=false -> //b1 failure specfication
	4/5:(x1'=3) & (f1'=false)
	+ 1/5:(x1'=3)&(f1'=true);
[b1]x1=2 & f1=true -> (x1'=3);
[T]x1 = 3 & f1= false -> (x1'=4);
[T1]x1 = 3 & f1= true -> (x1'=4);
[new1] x1=4 & f1= false ->(x1'=0);
endmodule

module g2 
x2 : [0..4];
[a2] x2=0 -> (x2'=1);
[T]x2 = 1 & f1= false-> (x2'=2);
[T2]x2 = 1 & f1= true -> (x2'=2);
[b2]x2=2->(x2'=3);
[T]x2 = 3 & f1= false-> (x2'=4);
[T2]x2 = 3 & f1= true -> (x2'=4);
[new2] x2=4->(x2'=0);
endmodule

module g1P
//a1 failed in g1 at the first run
x1p : [0..3];
[a1] x1p=0 -> (x1p'=1);
[T] x1p=1 -> (x1p'=2);
[T1] x1p=1 -> (x1p'=2);
[T2] x1p=1 -> (x1p'=2);
[T] x1p=2 -> (x1p'=2);
[T1] x1p=2 -> (x1p'=2);
[T2] x1p=2 -> (x1p'=2);
[b1]x1p=2 -> (x1p'=3);
endmodule

system
//Define how all processes above compose
(g1|[T]| g2)||g1P //or (g1|| g2)||g1P
endsystem

init
//Create an "init" label indicating initial state(s)
x1=0 & f1=false & x2=0 & x1p=0
endinit

//labels
//"final" states are required for generated HPA to be meaningful
label "final" = (x1>=3)&(x1p=3 & f1=true);

mdp

module M1
x1 : [0..2] init 0;
f1 : bool init false;
[a1] x1=0 & f1=false -> 2/3:(x1'=1) & (f1'=false)+1/3:(x1'=1)&(f1'=true);
[T]x1 = 1 & f1= false -> (x1'=2);
[T1]x1 = 1 & f1= true -> (x1'=2);
[new1] x1=2 & f1= false ->(x1'=0);
endmodule

//module M2= M1 [ x1=x2, f1 = f2, a1 = a2,T1=T2,new1=new2] endmodule

module M2
x2 : [0..2] init 0;
[a2] x2=0 -> (x2'=1);
[T]x2 = 1 & f1= false-> (x2'=2);
[T2]x2 = 1 & f1= true -> (x2'=2);
[new2] x2=2->(x2'=0);
endmodule

module M1P
x1p : [0..3] init 0;
[a1] x1p=0 -> (x1p'=1);
//[T] x1p=1 -> (x1p'=2);
[T1] x1p=1 -> (x1p'=2);
[T2] x1p=1 -> (x1p'=2);
[T1] x1p=2 -> (x1p'=3);
[T2] x1p=2 -> (x1p'=3);
endmodule

system
(M1|[T]| M2)||M1P
//M1 |[a1,a2]| M2 //manual\ThePRISMLanguage\ProcessAlgebraOperators
endsystem

//label "final"=(x1=2 & x2=2 & f1=false & f2=false);
label "final" = (x1=2 & x1p=3 & f1=true);
